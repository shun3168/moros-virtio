import sys
from PIL import Image # Assuming you're using Pillow for image processing

def convert_image_to_rust_colors(image_path):
    sys.stderr.write(f"Starting conversion for: {image_path}\n")

    try:
        # Open image and ensure it's in RGBA format (Red, Green, Blue, Alpha)
        img = Image.open(image_path).convert("RGBA")
        width, height = img.size
        sys.stderr.write(f"Original image dimensions: {width}x{height}\n")

        # Resize if necessary, maintaining aspect ratio
        max_width = 1200
        max_height = 800
        if width > max_width or height > max_height:
            img.thumbnail((max_width, max_height))
            width, height = img.size
            sys.stderr.write(f"Resized image dimensions: {width}x{height}\n")
        else:
            sys.stderr.write("Image does not need resizing.\n")

        # Start building the Rust output string
        rust_output = f"// Auto generated by '{sys.argv[0].split('/')[-1]}' from {image_path.split('/')[-1]}\n"
        rust_output += f"// Dimensions: {width}x{height}\n"
        
        # Removed the explicit PICTURE_DATA_WIDTH and PICTURE_DATA_HEIGHT constants.
        # Their values will be embedded directly into the array type.

        # Change the type to [[u32; WIDTH]; HEIGHT] directly using the Python variables
        rust_output += f"pub const PICTURE_DATA: [[u32; {width}]; {height}] = [\n"

        pixel_data = list(img.getdata()) # Get pixel data as a list of (R,G,B,A) tuples

        for y in range(height):
            rust_output += "    ["
            for x in range(width):
                r, g, b, a = pixel_data[y * width + x]
                # Convert RGBA components to a single 0xAARRGGBB u32 value
                # (alpha << 24) | (red << 16) | (green << 8) | blue
                color_code = (a << 24) | (r << 16) | (g << 8) | b
                rust_output += f"{color_code:#010x}," # Format as hex with 0x prefix and leading zeros (e.g., 0xFFRRGGBB)
            rust_output += "],\n" # End of row
        rust_output += "];\n" # End of 2D array

        sys.stderr.write("Conversion complete. Outputting Rust data.\n")
        return rust_output

    except Exception as e:
        sys.stderr.write(f"Error converting image: {e}\n")
        sys.exit(1) # Exit with an error code

if __name__ == "__main__":
    if len(sys.argv) < 2:
        sys.stderr.write("Usage: python convert_picture.py <path_to_image.png>\n")
        sys.stderr.write("Example: python convert_picture.py assets/moros_picture.png > src/picture_data.rs\n")
        sys.exit(1)

    image_path = sys.argv[1]
    rust_code = convert_image_to_rust_colors(image_path)
    sys.stdout.write(rust_code) # This is the only part that prints to stdout for redirection